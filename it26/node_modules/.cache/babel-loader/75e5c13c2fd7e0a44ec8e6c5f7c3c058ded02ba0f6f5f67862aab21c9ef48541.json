{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5b2d5ecc\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  style: {\n    \"padding\": \"10px\",\n    \"flex\": \"auto\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"main\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["style","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["/Users/ning/it26/it26/VUE/src/views/Test.vue"],"sourcesContent":["<template>\n  <div style=\"padding:10px;flex: auto\">\n    <div id=\"main\"></div>\n\n  </div>\n\n</template>\n\n<script>\nimport request from \"@/utils/request\";\nimport * as echarts from 'echarts/core';\nimport { GridComponent } from 'echarts/components';\nimport { BarChart } from 'echarts/charts';\nimport { CanvasRenderer } from 'echarts/renderers';\n\n\nexport default {\n  name: \"incomebar\",\n  data: () => ({\n    income: [],\n    myChart: null,\n  }),\n  async created() {\n    request.get(\"/operator/sumIncomebar\", {}).then(res => {\n      this.income = res.data\n      console.log(res.data)\n      console.log(this.income.map(d => d))\n    })\n    echarts.use([GridComponent, BarChart, CanvasRenderer]);\n  },\n  mounted() {\n    this.myChart = echarts.init(document.getElementById('main'));\n    let option = {\n      xAxis: {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [\n        {\n          data: this.income.map(d => d),\n          type: 'bar',\n        }\n      ]\n    };\n    this.myChart.setOption(option);\n  },\n  watch: {\n    income: {\n      handler() {\n        this.myChart.setOption({\n          xAxis: {\n            type: 'category',\n            data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n          },\n          yAxis: {\n            type: 'value'\n          },\n          series: [\n            {\n              data: this.income.map(d => d),\n              type: 'bar',\n            }\n          ]\n        });\n      }\n    }\n  },\n}\n\n</script>\n\n<style scoped>\n#main {\n  width: 100%;\n  height: 300%;\n  margin: 40px auto;\n}\n</style>"],"mappings":";;;EACOA,KAA+B,EAA/B;IAAA;IAAA;EAAA;AAA+B;gEAClCC,mBAAA,CAAqB;EAAhBC,EAAE,EAAC;AAAM;oBAAdC,UAAqB,C;;uBADvBC,mBAAA,CAGM,OAHNC,UAGM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}